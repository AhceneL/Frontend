import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { TacheService } from '../../services/tache.service'; // Assurez-vous que ce service est bien import√©
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-detail-tache-membre',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './detail-tache-membre.component.html',
  styleUrls: ['./detail-tache-membre.component.css']
})
export class DetailTacheMembreComponent implements OnInit {
  taskId: string = '';  // ID de la t√¢che r√©cup√©r√© depuis l'URL
  taskData: any = null;  // D√©tails de la t√¢che
  comments: string = '';  // Commentaires de la t√¢che
  file: File | null = null;  // Fichier ajout√© √† la t√¢che
  status: string = '';  // Statut de la t√¢che
  dueDate: string = '';  // Date d'√©ch√©ance de la t√¢che
  assignedTo: string = '';  // Personne assign√©e √† la t√¢che
  description: string = '';  // Description de la t√¢che

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private tacheService: TacheService  // Service pour r√©cup√©rer la t√¢che
  ) {}

  ngOnInit(): void {
    this.route.queryParams.subscribe(params => {
      this.taskId = params['taskId'] || '';  // V√©rification de la r√©cup√©ration du taskId

      if (!this.taskId) {
        console.error("‚ùå L'ID de la t√¢che est manquant.");
        alert("Aucune t√¢che trouv√©e pour ce nom.");
        return;
      }

      // Charger la t√¢che √† partir de l'API
      this.chargerTache(Number(this.taskId));
    });
  }

  // Charger les d√©tails de la t√¢che via l'API
  chargerTache(taskId: number) {
    this.tacheService.getTacheById(taskId).subscribe({
      next: (data: any) => {
        if (data) {
          this.taskData = data;  // R√©cup√©rer les d√©tails de la t√¢che
          this.status = this.taskData.statut || '';  // Initialiser le statut
          this.dueDate = this.taskData.dateLimite || '';  // Initialiser la date d'√©ch√©ance
          this.assignedTo = this.taskData.assigneeEmail || '';  // Initialiser l'assignation
          this.description = this.taskData.description || '';  // Initialiser la description
        } else {
          alert("‚ùå T√¢che introuvable.");
        }
      },
      error: (err) => {
        console.error("Erreur lors du chargement de la t√¢che:", err);
        alert("‚ùå Impossible de charger la t√¢che. Erreur: " + err);
      }
    });
  }

  // Mettre √† jour le statut de la t√¢che
  updateStatus(newStatus: string) {
    this.status = newStatus;
  }

  // Ajouter un commentaire √† la t√¢che
  addComment() {
    if (this.comments.trim()) {
      if (!this.taskData.commentaires) this.taskData.commentaires = [];
      this.taskData.commentaires.push(this.comments.trim());
      this.comments = '';
      this.enregistrer();
      alert('üí¨ Commentaire ajout√© avec succ√®s !');
    } else {
      alert('‚ùó Veuillez entrer un commentaire.');
    }
  }

  // G√©rer le t√©l√©chargement de fichier
  handleFileInput(event: any) {
    if (event.target.files.length > 0) {
      const fichier = event.target.files[0];
      if (this.taskData && fichier) {
        this.file = fichier;
        this.taskData.fichier = fichier.name;  // Mettre √† jour le fichier
        this.enregistrer();
        alert(`üìé Fichier "${fichier.name}" ajout√© √† la t√¢che.`);
      }
    } else {
      alert('Aucun fichier s√©lectionn√©.');
    }
  }

  saveTask() {
    if (this.taskData) {
      // Met √† jour les propri√©t√©s de la t√¢che
      this.taskData.statut = this.status;
      this.taskData.dateEcheance = this.dueDate;
      this.taskData.assigneeEmail = this.assignedTo;
      this.taskData.description = this.description;

      // V√©rifie si un commentaire est ajout√©
      if (this.comments.trim()) {
        if (!this.taskData.commentaires) this.taskData.commentaires = [];
        this.taskData.commentaires.push(this.comments.trim());
        this.comments = '';
      }

      // V√©rifie si un fichier a √©t√© ajout√©
      if (this.file) {
        this.taskData.fichier = this.file.name;
      }

      // Enregistre les changements via l'API
      this.enregistrer();

      alert('‚úÖ T√¢che mise √† jour et sauvegard√©e avec succ√®s.');
    } else {
      alert('‚ùå Erreur : aucune t√¢che √† mettre √† jour.');
    }
  }

  enregistrer() {
    console.log("Enregistrement de la t√¢che mise √† jour:", this.taskData);

    // Enregistrer la t√¢che dans le backend via l'API
    this.tacheService.update(this.taskData.id, this.taskData).subscribe({
      next: (data) => {
        console.log("T√¢che mise √† jour avec succ√®s :", data);
      },
      error: (err) => {
        console.error("Erreur lors de la mise √† jour de la t√¢che", err);
        alert("‚ùå Erreur lors de la mise √† jour de la t√¢che");
      }
    });
  }

  goToDashboard() {
    this.router.navigate(['/dashboard/membre']);
  }

  logout() {
    localStorage.clear();
    this.router.navigate(['/auth']);
  }
}
