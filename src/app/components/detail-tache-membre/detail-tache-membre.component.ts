import { Component, OnInit } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { TacheService } from '../../services/tache.service';  // Assurez-vous que ce service est bien import√©
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';

@Component({
  selector: 'app-detail-tache-membre',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './detail-tache-membre.component.html',
  styleUrls: ['./detail-tache-membre.component.css']
})
export class DetailTacheMembreComponent implements OnInit {
  taskId: string = '';  // ID de la t√¢che r√©cup√©r√© depuis l'URL
  taskData: any = null;  // D√©tails de la t√¢che
  comments: string = '';  // Commentaires de la t√¢che
  file: File | null = null;  // Fichier ajout√© √† la t√¢che
  status: string = '';  // Statut de la t√¢che
  dueDate: string = '';  // Date d'√©ch√©ance de la t√¢che
  assignedTo: string = '';  // Personne assign√©e √† la t√¢che
  description: string = '';  // Description de la t√¢che

  constructor(
    private route: ActivatedRoute,
    private router: Router,
    private tacheService: TacheService  // Service pour r√©cup√©rer la t√¢che
  ) {}

  ngOnInit(): void {
    // R√©cup√©rer l'ID de la t√¢che depuis les query params
    this.route.queryParams.subscribe(params => {
      this.taskId = params['taskId'] || '';  // V√©rification de la r√©cup√©ration du taskId
      console.log("taskId r√©cup√©r√© : ", this.taskId);  // Affichage pour v√©rifier l'ID de la t√¢che

      // V√©rifier si l'ID de la t√¢che est pr√©sent
      if (!this.taskId) {
        console.error("‚ùå L'ID de la t√¢che est manquant.");
        alert("Aucune t√¢che trouv√©e pour ce nom.");
        return;
      }

      // Appeler l'API pour r√©cup√©rer les d√©tails de la t√¢che
      console.log("Appel API pour r√©cup√©rer la t√¢che avec l'ID:", this.taskId);
      this.chargerTache(Number(this.taskId));  // Convertir taskId en nombre et charger la t√¢che
    });
  }

  // Charger les d√©tails de la t√¢che via l'API
  chargerTache(taskId: number) {
    console.log('Appel de l\'API pour r√©cup√©rer la t√¢che avec l\'ID:', taskId);

    this.tacheService.getTacheById(taskId).subscribe({
      next: (data: any) => {
        console.log('Donn√©es r√©cup√©r√©es de l\'API:', data);

        if (data) {
          this.taskData = data;  // R√©cup√©rer les d√©tails de la t√¢che
          this.status = this.taskData.statut || '';  // Initialiser le statut
          this.dueDate = this.taskData.dateLimite || '';  // Initialiser la date d'√©ch√©ance
          this.assignedTo = this.taskData.assigneeEmail || '';  // Initialiser l'assignation
          this.description = this.taskData.description || '';  // Initialiser la description

          console.log("T√¢che trouv√©e : ", this.taskData);
        } else {
          console.log('Aucune t√¢che trouv√©e pour l\'ID:', taskId);
          alert("‚ùå T√¢che introuvable.");
        }
      },
      error: (err) => {
        console.error("Erreur lors du chargement de la t√¢che:", err);
        alert("‚ùå Impossible de charger la t√¢che. Erreur: " + err);
      }
    });
  }

  // Mettre √† jour le statut de la t√¢che
  updateStatus(newStatus: string) {
    console.log("Mise √† jour du statut : ", newStatus);  // Log de la mise √† jour du statut
    if (this.taskData) {
      this.taskData.statut = newStatus;
      alert(`‚úÖ Statut mis √† jour : ${newStatus}`);
    }
  }

  // Ajouter un commentaire √† la t√¢che
  addComment() {
    if (this.comments.trim()) {
      console.log("Ajout du commentaire : ", this.comments);  // Log du commentaire ajout√©
      if (!this.taskData.commentaires) {
        this.taskData.commentaires = [];
      }

      // V√©rification pour √©viter les doublons
      if (!this.taskData.commentaires.includes(this.comments.trim())) {
        this.taskData.commentaires.push(this.comments.trim());
        alert(`üí¨ Commentaire ajout√© avec succ√®s : ${this.comments}`);
      } else {
        alert('‚ùó Ce commentaire a d√©j√† √©t√© ajout√©.');
      }

      this.comments = '';
      this.enregistrer();
    } else {
      alert('‚ùó Veuillez entrer un commentaire.');
    }
  }

  // G√©rer le t√©l√©chargement de fichier
  handleFileInput(event: any) {
    if (event.target.files.length > 0) {
      console.log("Fichier s√©lectionn√© : ", event.target.files[0]);  // Log du fichier s√©lectionn√©
      this.file = event.target.files[0];
    }
  }

  saveTask() {
    // V√©rification si la t√¢che existe dans le composant
    if (this.taskData) {
      // Met √† jour les propri√©t√©s de la t√¢che
      this.taskData.statut = this.status;
      this.taskData.dateEcheance = this.dueDate;
      this.taskData.assigneeEmail = this.assignedTo;
      this.taskData.description = this.description;

      // V√©rifie si un commentaire est ajout√©
      if (this.comments.trim()) {
        if (!this.taskData.commentaires) this.taskData.commentaires = [];
        this.taskData.commentaires.push(this.comments.trim());
        this.comments = ''; // R√©initialiser apr√®s ajout
      }

      // V√©rifie si un fichier a √©t√© ajout√©
      if (this.file) {
        this.taskData.fichier = this.file.name;
      }

      // Enregistrer les modifications via l'API
      this.enregistrer();

      alert('‚úÖ T√¢che mise √† jour et sauvegard√©e avec succ√®s.');
      console.log("Donn√©es envoy√©es au backend:", {
        id: this.taskData.id,
        statut: this.taskData.statut,
        dateEcheance: this.taskData.dateEcheance,
        assigneA: this.taskData.assigneA,
        description: this.taskData.description,
        commentaires: this.taskData.commentaires,
        fichier: this.taskData.fichier
      });
    } else {
      alert('‚ùå Erreur : aucune t√¢che √† mettre √† jour.');
    }
  }

  enregistrer() {
    console.log("Enregistrement de la t√¢che mise √† jour:", this.taskData);

    // Enregistrer la t√¢che dans le backend via l'API
    this.tacheService.update(this.taskData.id, this.taskData).subscribe({
      next: (data) => {
        console.log("T√¢che mise √† jour avec succ√®s :", data);
      },
      error: (err) => {
        console.error("Erreur lors de la mise √† jour de la t√¢che", err);
        alert("‚ùå Erreur lors de la mise √† jour de la t√¢che");
      }
    });
  }

  goToDashboard() {
    console.log('Retour au tableau de bord');
    this.router.navigate(['/dashboard/membre']);
  }

  logout() {
    console.log('D√©connexion...');
    localStorage.clear();
    this.router.navigate(['/auth']);
  }
}
